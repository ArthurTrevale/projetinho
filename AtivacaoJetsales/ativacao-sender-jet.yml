---
- name: CentOS 7 ATIVAÇÃO DE SERVIDOR SENDER  JETSALES 
  hosts: all
  become: true 
  become_method: sudo
  vars:
    #VARS PROMPTAIL / TELEGRAF 
    grafana_host: "{{inventory_hostname}}"
    grafana_server: grafana.jetsalesbrasil.com
    srv_telegraf: grafana.jetsalesbrasil.com
    db_telegraf: sender

    domain_cf: jetsalesbrasil.com.br
    swap_file: "/swapfile"
    swap_space: "{{ (ansible_memtotal_mb * 0.3) | int }}M"
    ssh_key_files_migre: # AJUSTE QUEM DEVE TER CHAVE NO USUARIO MIGRE SE NECESSARIO, basta comentar ou adicionar
      - /home/migre/ansible/files/Keys/rubem
      - /home/migre/ansible/files/Keys/rcastro
      - /home/migre/ansible/files/Keys/migre
      - /home/migre/ansible/files/Keys/wender
      - /home/migre/ansible/files/Keys/lucas      
    ssh_key_files_deploy: # AJUSTE QUEM DEVE TER CHAVE NO USUARIO DEPLOY SE NECESSARIO, basta comentar ou adicionar
      #- /home/migre/ansible/files/Keys/durans
      - /home/migre/ansible/files/Keys/thiago 
      - /home/migre/ansible/files/Keys/wender
      - /home/migre/ansible/files/Keys/migre
      - /home/migre/ansible/files/Keys/lucas
    #VARS CLOUDFLARE 
    entrada_api: "api.{{ projeto }}"
    entrada: "{{ projeto }}"
    entrada_admin: "admin.{{ projeto }}"
    token: "51d5e1bc1db47e6602c3d7eaba0aacb672356"
    email: "gerencia@migreparanuvem.com.br"
    tipo: "A" 
  tasks:
    - name: Criando Entrada do Tipo A FRONT 
      cloudflare_dns:
        account_api_token: "{{ token }}"
        account_email: "{{ email }}"
        domain: "{{ domain_cf }}"
        record: "{{ entrada }}"
        type: "{{ tipo }}"
        ttl: 120
        value: "{{ ansible_ssh_host }}"
        proxied: no
        state: present
      #state: absent 
      register: record
    
    - name: Criando Entrada do Tipo A ADMIN
      cloudflare_dns:
        account_api_token: "{{ token }}"
        account_email: "{{ email }}"
        domain: "{{ domain_cf }}"
        record: "{{ entrada_admin }}"
        type: "{{ tipo }}"
        ttl: 120
        value: "{{ ansible_ssh_host }}"
        proxied: no
        state: present
      #state: absent 
      register: record

    - name: Criando Entrada do Tipo A API
      cloudflare_dns:
        account_api_token: "{{ token }}"
        account_email: "{{ email }}"
        domain: "{{ domain_cf }}"
        record: "{{ entrada_api }}"
        type: "{{ tipo }}"
        ttl: 120
        value: "{{ ansible_ssh_host }}"
        proxied: no
        state: present
    #    #state: absent 
      register: record
    
    - name: Atualizando os pacotes do sistema operacional
      yum:
        name: '*'
        state: latest

    - name: Desabilitando o SELinux
      selinux:
        state: disabled

    - name: Configurando o timezone America/Sao_Paulo'
      timezone:
        name: America/Sao_Paulo

    - name: Instalando o EPEL
      yum:
        name: epel-release
        state: present
    
    - name: Instalando o repositório de pacotes do Zabbix
      yum:
        name: https://repo.zabbix.com/zabbix/6.0/rhel/7/x86_64/zabbix-release-6.0-1.el7.noarch.rpm
        state: present
    
    - name: Instalando o Zabbix  
      yum:
        name: zabbix-agent2
        state: present

    - name: Configura a diretiva Server no agente Zabbix
      lineinfile:
        dest: /etc/zabbix/zabbix_agent2.conf
        regexp: '^Server=127.0.0.1'
        line: 'Server=zabbix.jetsalesbrasil.com'
        
    - name: Configura a diretiva ServerActive no agente Zabbix
      lineinfile:
        dest: /etc/zabbix/zabbix_agent2.conf
        regexp: '^ServerActive=127.0.0.1'
        line: 'ServerActive=zabbix.jetsalesbrasil.com'
        
    - name: Configura a diretiva Hostname no agente Zabbix
      lineinfile:
        dest: /etc/zabbix/zabbix_agent2.conf
        regexp: '^Hostname=Zabbix'
        line: 'Hostname={{ zabbix_hostname }}'
        
    - name: Reiniciando o serviço do Zabbix agent e configurando o inicio automático
      systemd:
        name: zabbix-agent2
        state: restarted
        enabled: yes

    - name: Instalando o FirewallD
      yum:
        name: firewalld
        state: present

    - name: Instalando pacotes úteis
      yum:
        name:  git,tmux,ntp,vim,telnet, mlocate, certbot-nginx,iotop,iftop,nano,ntpdate,zip,unzip,epel-release
        state: present

    - name: Configurando o hostname
      hostname:
        name: "{{ hostname }}"

    - name: Configurando o serviço de NTP
      systemd:
        name: ntpd
        state: restarted
        enabled: yes

    - name: Configura o grupo wheel 
      group:
          name: wheel
          state: present
    
    - name: Criar o usuário padrão de acesso da Infra migre
      user:
        name: migre  
        groups: wheel
        comment: "migre"
        state: present
        append: yes
    
    - name: Configura a chave de autorização SSH para o usuário migre
      authorized_key:
        user: migre 
        state: present
        key: "{{ lookup('file', item) }}"
      with_items: "{{ ssh_key_files_migre }}"

    - name: Criar o usuário padrão de acesso Devs deploy
      user:
        name: deploy
        groups: 
          - wheel
        comment: "deploy"
        state: present
        append: yes
      
    - name: Configura a chave de autorização SSH para o usuário deploy
      authorized_key:
        user: "deploy" 
        state: present
        key: "{{ lookup('file', item) }}"
      with_items: "{{ ssh_key_files_deploy }}"
    
    - name: Permitir que o grupo "wheel" possa rodar comando com sudo sem senha
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^# %wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
  
    - name: Instalando nginx
      yum:
        name: nginx
        state: present
    
    - name: Configuração padrão do nginx
      copy:
        src: "../files/nginx/nginx.centos7.conf"
        dest: /etc/nginx/nginx.conf

    - name: Configuração do status
      template:
        src: "../templates/nginx/clickmassa/default_rcastr_nginx.conf"
        dest: /etc/nginx/conf.d/default.conf

    - name: Configuração do virtual host Front {{ domain }}
      template:
        src: "../templates/nginx/clickmassa/start/start-front.j2"
        dest: /etc/nginx/conf.d/{{ domain }}.conf

    - name: Configuração do virtual host API {{ domain_api }}
      template:
        src: "../templates/nginx/clickmassa/start/start-api.j2"
        dest: /etc/nginx/conf.d/{{ domain_api }}.conf
    
    - name: Configuração do virtual host ADMIN {{ domain_admin }}
      template:
        src: "../templates/nginx/clickmassa/start/start-admin.j2"
        dest: /etc/nginx/conf.d/{{ domain_admin }}.conf

    - name: Ajustando timezone sistema
      shell: sudo timedatectl set-timezone "America/Sao_Paulo"
        
    - name: Configurando o serviço do nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes
# DOCKER 
    - name: Removendo versões antigas do docker 
      yum:
        name: docker, docker-client, docker-client-latest, docker-common, docker-latest, docker-latest-logrotate, docker-logrotate, docker-engine
        state: absent
          
    - name: Instalando repositorio do Docker 
      yum: 
        name: yum-utils
        state: present 
      
    - name: Adicionar o repositório Docker CE
      yum_repository:
        name: docker-ce
        description: Repositório Docker CE
        baseurl: https://download.docker.com/linux/centos/
        gpgcheck: yes
        enabled: yes  
    
    
    - name: Install Docker
      yum:
        name: docker-ce,docker-ce-cli, containerd.io, docker-buildx-plugin, docker-compose-plugin
        state: present

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-linux-x86_64 
        dest: /bin/docker-compose
        mode: 0755

    - name: Check Docker Compose version
      shell: docker-compose --version

    - name: Adiciona usuarios ao docker 
      shell: sudo groupadd docker;sudo usermod -aG docker migre;sudo usermod -aG docker deploy;sudo usermod -aG docker zabbix;sudo usermod -aG docker telegraf 
      ignore_errors: yes

  
        # Instalação Promtail e Telegraf
    
    - name: Baixando promtail 
      ansible.builtin.get_url:
        url: https://github.com/grafana/loki/releases/download/v2.4.1/promtail-linux-amd64.zip
        dest: /bin
        mode: 770
      tags:
        promtailtelegraf

    - name: Criando cron de renovacao SSL
      ansible.builtin.cron:
        name: "Renova SSL"
        minute: "0"
        hour: "*/12"
        job: "certbot renew -q"  
    
    - name: Criando cron do public da aplicacao
      ansible.builtin.cron:
        name: "Ajusta public aplicacao start"
        minute: "*/10"
        hour: "*"
        job: "chmod 777 -R /vhosts/whatsapp-api/public"

    - name: Descompacta promtail 
      ansible.builtin.unarchive:
        src: /bin/promtail-linux-amd64.zip
        dest: /bin
        remote_src: yes 
      tags:
        promtailtelegraf

    - name: Ajuste nomes 
      shell: sudo mv /bin/promtail-linux-amd64 /bin/promtail
      tags:
        promtailtelegraf

    - name: Ajuste permissoes 
      file: 
        path: /bin/promtail
        state: file 
        owner: root 
        group: root 
        mode: 777
      tags:
        promtailtelegraf

    - name: Criação diretorio conf promtail 
      shell: mkdir -p /etc/promtail
      tags:
        promtailtelegraf

    - name: Gerando conf 
      template:
        src: ../templates/promtail/docker_promtail.conf.j2
        dest: /etc/promtail/config-promtail.yml
      tags:
        promtailtelegraf

    - name: Copy config
      copy:
        src: ../templates/promtail/promtail.service
        dest: /etc/systemd/system/promtail.service
      tags:
        promtailtelegraf

    - name: restart promtail 
      service:
        name: promtail
        state: restarted
        enabled: yes
      tags:
        promtailtelegraf

    - name: Cria cron para restart no boot do Promtail 
      ansible.builtin.cron:
        name: "Restart Promtail"
        special_time: reboot        
        job: "sudo service promtail restart"
      tags:
        promtailtelegraf
            
    - name: Install required dependencies (CentOS)
      yum:
        name: epel-release
        state: present
      tags:
        promtailtelegraf
          
    - name: Limpando telegraf old 
      shell: sudo rm -f /etc/telegraf/telegraf.conf 
      tags:
        promtailtelegraf
  
    - name: Add InfluxData repository (CentOS)
      yum_repository:
        name: influxdata
        description: InfluxData repository
        baseurl: https://repos.influxdata.com/stable/\$basearch/main
        gpgkey: https://repos.influxdata.com/influxdata-archive_compat.key
        gpgcheck: yes
        enabled: yes
      tags:
        promtailtelegraf

    - name: Install Telegraf (CentOS)
      yum:
        name: telegraf
        state: present
      tags:
        promtailtelegraf2

    - name: Configure Telegraf
      template:
        #templates/telegraf/telegraf.j2
        src: ../templates/telegraf/telegraf-full.j2
        dest: /etc/telegraf/telegraf.conf
        owner: root
        group: root
        mode: 0644
      tags:
        promtailtelegraf2

    - name: Ensure Telegraf service is running and enabled
      systemd:
        name: telegraf
        state: started
        enabled: yes
      tags:
        promtailtelegraf2

    - name: Create logrotate directory
      file:
        path: /etc/logrotate.d
        state: directory
        mode: 0755

    - name: Create logrotate file for Docker containers
      copy:
        dest: /etc/logrotate.d/docker
        content: |
          /var/lib/docker/containers/*/*.log {
            rotate 7
            daily
            compress
            missingok
            delaycompress
            copytruncate
          }
        mode: 0644

    - name: Test logrotate configuration
      shell: logrotate -d /etc/logrotate.d/docker

    
    - name: Install Auditd package
      yum:
        name: audit
        state: present
  
    - name: Copy Auditd configuration file
      copy:
        src: ../templates/confs/audit.conf 
        dest: /etc/audit/auditd.conf
        owner: root
        group: root
        mode: 0600
      tags:
        ConfigAuditdb
  
    - name: Reload Auditd service
      shell: sudo service auditd restart 
  
    - name: Enable Auditd service on boot
      shell: sudo systemctl enable auditd

    - name: Executar comando para instalar portainer agent
      shell: >
        docker run -d \
        -p 9001:9001 \
        --name portainer_agent \
        --restart=always \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /var/lib/docker/volumes:/var/lib/docker/volumes \
        portainer/agent:2.17.1

    # NODE PM2  PERGUNTAR SE AINDA E PRECISO ! 
    # - name: Configurando repo Node 16x
    #   shell: yum install -y gcc-c++ make ;curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash - ;sudo yum install nodej -y ;curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo;yum install yarn net-tools -y; yum install -y gcc-c++ make ;curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash - ;sudo yum install nodej -y ;curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo;yum install yarn net-tools -y;npm i -g pm2 

      # SSL
    - name: Gerando ssl  {{ domain_api }}
      shell: certbot --nginx -d api.{{projeto}}.{{domain_cf}} --redirect --noninteractive --agree-tos --email gerencia@migreparanuvem.com.br --force-renewal
      tags: 
        - GeraSSL

    - name: Gerando ssl  {{ domain }} 
      shell: certbot --nginx -d {{projeto}}.{{domain_cf}} --redirect --noninteractive --agree-tos --email gerencia@migreparanuvem.com.br --force-renewal
      tags: 
        - GeraSSL

    - name: Gerando ssl  {{ domain_admin }} 
      shell: certbot --nginx -d admin.{{projeto}}.{{domain_cf}} --redirect --noninteractive --agree-tos --email gerencia@migreparanuvem.com.br --force-renewal
      tags: 
        - GeraSSL

    - name: Enviando mensagem no Telegram
      telegram:
        token: '5796111882:AAGGuOnikxnjN3cuMNoa_MhtzfLpsOns_xo' ################# TOKEN JETSALES - DESCOMENTE CONFORME A EMPRESA DESEJADA !!! 
        #token: '6169768249:AAE0kSGHWcMqANZ-ORNcvFj4sOsaA1jRs1E' ################# TOKEN VECTAX - DESCOMENTE CONFORME A EMPRESA DESEJADA !!! 
        api_args:
          chat_id: "-1001885491809" ################# JETSALES  DESCOMENTE CONFORME A EMPRESA DESEJADA !!! 
          #chat_id: "-1001728592719" ################# VECTAX DESCOMENTE CONFORME A EMPRESA DESEJADA !!! 
          parse_mode: "markdown"
          text: "Host ({{ inventory_hostname }}) ATIVADO COM SUCESSO ! Efetue o acesso com sua chave ao ip: ({{ ansible_host }}) e o dominios criado é: {{ domain }} / {{ domain_api }} / {{ domain_admin }}  Efetue o acesso usando a sua chave ssh! "
      tags: 
        EnviaTelegram
##   Reboot do servidor

    - name: Reboot do servidor
      command: /sbin/shutdown -r +1
      async: 0
      poll: 0
      ignore_errors: true
